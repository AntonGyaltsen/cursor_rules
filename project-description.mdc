---
description: project context for high-level understanding of project
globs:
---

# Your rule content
B2P Payment Service is a backend system built with FastAPI and SQLAlchemy that manages payment processing via QR codes. It registers orders, generates QR codes, and processes payment callbacks while integrating with external systems like the B2P API for payment registration and the Mayber API for further payment processing and invoicing. The service leverages asynchronous tasks, dependency injection, and strict type-checking with Pydantic for robust and secure financial workflows.

Based on the codebase analysis, I'll provide a structured overview of the B2P Payment Service project.

# B2P Payment Service Structure

## Overview
A FastAPI-based backend service that handles payment processing via QR codes, integrating with B2P (Best2Pay) and Mayber APIs.

## Project Structure

### Core Application (`app/`)
- **API Layer** (`app/api/`)
  - `b2p/` - B2P API integration endpoints
  - `qr/` - QR code management endpoints
  - `common/` - Shared API components

- **Models** (`app/models/`)
  - Database models using SQLAlchemy
  - Key models:
    - `QRCode` - QR code information
    - `QRPayment` - Payment transaction details
    - `Invoice` - Invoice records

- **Services** (`app/services/`)
  - `qr.py` - QR code business logic
  - Payment processing and integration logic

- **Clients** (`app/clients/`)
  - `b2p/` - B2P API client
  - `mayber/` - Mayber API client
  - `base_client/` - Base client functionality

- **Config** (`app/config/`)
  - Database configuration
  - Application settings

- **Utils** (`app/utils/`)
  - Utility functions and helpers

### Infrastructure

- **Database**
  - PostgreSQL
  - Migrations using Alembic
  - Async database access with SQLAlchemy

- **Docker**
  - `Dockerfile` - Container configuration
  - `docker-compose.local.yml` - Local development setup

### Documentation (`docs/`)
- **Diagrams/**
  - `entities.mmd` - Entity relationship diagrams
  - `main_flow.mmd` - Main process flow
  - `callback.mmd` - Callback processing
  - `payout.mmd` - Payout flow
  - `2_sbp_classes.mmd` - SBP class diagrams

### Development Tools
- **Testing** (`tests/`)
  - Test configuration
  - Test utilities

- **Build & Deployment**
  - `Makefile` - Development commands
  - `.gitlab-ci.yml` - CI/CD pipeline
  - Requirements management with `pyproject.toml`

## Key Features
1. QR Code Generation and Management
2. Payment Processing
3. Integration with External Payment Systems
4. Asynchronous Operations
5. Secure Financial Transactions
6. Kubernetes-ready Deployment

## Development Setup
- Python 3.12 environment
- PostgreSQL database
- Virtual environment management
- Development tools (mypy, pytest, etc.)

## Deployment
- Kubernetes deployment via Helm
- CI/CD pipeline with GitLab
- Multiple environment support (stage, prod)
- Health monitoring and logging

This structure reflects a modern microservice architecture with clear separation of concerns, robust testing, and production-ready deployment configurations.
